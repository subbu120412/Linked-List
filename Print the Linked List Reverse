Statement : 
You have been given a singly linked list of integers. 
Write a function to print the list in a reverse order.
To explain it further, you need to start printing the data from the tail
and move towards the head of the list, printing the head data at the end.

Sample Input 1 :
LL = 1 2 3 4 5 
Sample Output 1 :
5 4 3 2 1
Sample Input 2 :
LL = 1 2 3 
LL = 10 20 30 40 50 
Sample Output 2 :
3 2 1
50 40 30 20 10

/****************************************************************
     Following is the class structure of the Node class:
        class Node        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };
*****************************************************************/
Approach 1 :
// Reversing the Nodes by reassigning in reverse order.
// Again you have reverse the linked list to again access initial list.
//O(n) time O(1) space
void printReverse(Node *head){
    if(head){
	Node* prev = head;
	Node* curr = prev->next;
	while(curr !=NULL){
		Node* temp = curr->next;
		curr->next = prev;
		prev = curr;
		curr = temp;
	}
	head->next = NULL;
        while (prev) {
                cout << prev->data << " ";
                prev = prev->next;
        }
    }
}

Approach 2 : Recursively printing the linked list in reverse order.

O(n) time & O(n) space
void printReverse(Node *head) {
	if(!head) return;
	printReverse(head->next);
	cout<<head->data<<" ";
}

