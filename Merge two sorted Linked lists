You have been given two sorted(in ascending order) singly linked lists of integers.
Write a function to merge them in such a way that the resulting singly linked list is also sorted(in ascending order) and return the new head to the list.
Try solving this in O(1) auxiliary space.

Sample Input 1 :
LL1 = 2 5 8 12 
LL2 = 3 6 9 
Sample Output 1 :
2 3 5 6 8 9 12 
Sample Input 2 :
LL1 = 2 5 8 12 
LL2 = 3 6 9 
LL1 = 10 40 60 60 80 -1
LL2 = 10 20 30 40 50 60 90 100 -1
Sample Output 2 :
2 3 5 6 8 9 12 
10 10 20 30 40 40 50 60 60 60 80 90 100

/**************************************************************** 
    Following is the class structure of the Node class:
        class Node{
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/
// merging two nodes using inplace merge algorithm
// if any node value is less than other node value, update greater node address in lesser value node.

Node *mergeTwoSortedLinkedLists(Node *head1, Node *head2){
  if(!head1) return head2;
	if(!head2) return head1;
	Node* finalTail = NULL;
	Node* finalHead = NULL;
	if(head1->data < head2->data){
		finalHead = head1;
		finalTail = head1;
		head1 = head1->next;
	}else{
		finalTail = head2;
		finalHead = head2;
		head2 = head2->next;
	}
	while(head1 && head2){
		if(head1->data < head2->data){
			finalTail->next = head1;
			finalTail = head1;
			head1 = head1->next;
		}else{
			finalTail->next = head2;
			finalTail = head2;
			head2 = head2->next;
		}
	}
	if(!head1) finalTail->next = head2;
	if(!head2) finalTail->next = head1;
	return finalHead;
}
