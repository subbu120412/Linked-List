Statement : 
For a given singly linked list of integers, find and return the node present at the middle of the list.
If the length of the singly linked list is even, then return the first middle node.
Example: Consider, 10 -> 20 -> 30 -> 40 is the given list, then the nodes present at the middle with
respective data values are, 20 and 30. We return the first node with data 20.

Sample Input 1 :
LL = 1 2 3 4 5 
Sample Output 1 :
3
Sample Input 2 :
LL = 1 2 3 4 
Sample Output 2 :
2

/****************************************************************
 
    Following is the class structure of the Node class:
        class Node{
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/
// We will use fast & slow pointer to find the midnode. Fast pointer will move two steps.
// Slow pointer will move one step. If fast pointer reaches tail node or null. slow pointer points to midnode.
Node *midPoint(Node *head){
	if(!head) return head;
    Node* fastN = head->next;
	Node* slowN = head;
	while(fastN && fastN->next){
		slowN = slowN->next;
		fastN = fastN->next->next;
	}
	return slowN;
}
