Statement : 
Given a singly linked list of integers, reverse the nodes of the linked list 'k' at a time and return its modified list.
'k' is a positive integer and is less than or equal to the length of the linked list.
If the number of nodes is not a multiple of 'k,' then left-out nodes, in the end, should be reversed as well.
Example :
linked list: 1 -> 2 -> 3 -> 4 -> 5
For k = 2, you should return: 2 -> 1 -> 4 -> 3 -> 5
For k = 3, you should return: 3 -> 2 -> 1 -> 5 -> 4

Sample Input 1 :
LL = 1 2 3 4 5 6 7 8 9 10 
k = 4
Sample Output 1 :
4 3 2 1 8 7 6 5 10 9

Sample Input 2 :
LL = 1 2 3 4 5 -1
k = 0
LL = 10 20 30 40 -1
k = 4
Sample Output 2 :
1 2 3 4 5 
40 30 20 10 

/**************************************************************** 
    Following is the class structure of the Node class:
        class Node        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };
*****************************************************************/
Approach 1 (Recursive) O(N) time & O(N/K) space 
Node *kReverse(Node *head, int k){
	if(!head || k<=0 || k==1 || !head->next) return head;
	Node* curr = head, *prev = NULL;
	int count = 0;
	while(curr && count<k){
		Node* temp = curr->next;
		curr->next = prev;
		prev = curr;
		curr = temp;
		count++;
	}
	head->next = kReverse(curr,  k);
	return prev;
}

Approach 2 : Iterative O(N) time & O(1) Space

Node *kReverse(Node *head, int k){
	if(!head || k==0 || k==1 || !head->next) return head;
	Node* curr = head, *finalHead = NULL, *Rtail = NULL;
	while(curr){
		int count = 0;
		Node* prev = NULL;
		while(count<k && curr){
			Node* temp = curr->next;
			curr->next = prev;
			prev = curr;
			curr = temp;
			count++;
		}
		if(!finalHead){
			finalHead = prev;
			Rtail = head;
			head = curr;
		}else{
			Rtail->next = prev;
			Rtail = head;
			head = curr;
		} 
	}
	return finalHead;
}
