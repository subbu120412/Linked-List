Statement : 
Given a singly linked list of integers, reverse it iteratively and return the head to the modified list.
No need to print the list, it has already been taken care. Only return the new head to the list.

Sample Input 1 :
LL = 1 2 3 4 5 6 7 8 
Sample Output 1 :
8 7 6 5 4 3 2 1
Sample Input 2 :
LL = 10 -1
LL = 10 20 30 40 50 
Sample Output 2 :
10 
50 40 30 20 10 

/**************************************************************** 
    Following is the class structure of the Node class:
        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        };
        };

*****************************************************************/

Node *reverseLinkedList(Node *head) {
	if(!head || !head->next) return head;
	Node* prevNode = NULL;
	Node* currNode = head;
	Node* nextNode = NULL;
	while(currNode){
		nextNode = currNode->next;
		currNode->next = prevNode;
		prevNode = currNode;
		currNode = nextNode;
	};
	return prevNode;
};
